## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s<-NULL
set<-function(y){
x<<-y
s<-NULL
}
get<-function(){
x
}
setInverse<-function(solve){
s<<-solve
}
getInverse<-function(){
s
}
list(set =set, get=get, setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s<-x$getInverse()
if(!is.null(s)){
message("Retreiving Cached Data")
return(s)
}
data<-x$get()
s<-solve(data,...)
x$setInverse(s)
return(s)
}
m0 <- matrix(c(1, 4, 9, 16), 2,2)
m0
m1<-makeCacheMatrix(m0)
m1
solve(m1)
solve(m0)
m0
cacheSolve(m0)
# cachematrix.R implements accepts a matrix input and creates a
# special matrix object that is able to cache its own inverse
# example usage:
# 	source("cachematrix.R")
#	m0 <- matrix(c(1, 4, 9, 16), 2,2)	# create matrix
#	m1 <- makeCacheMatrix(m0)			# create 'special' matrix
#	cacheSolve(m2)			# calculate inverse of matrix
#	cacheSolve(m2)			# calling cacheSolve again retrieves previously
#							# calculated inverse
# makeCacheMatrix accepts a matrix and creates an object that
# can cache its' inverse. i.e. save its own inverse itself
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# cacheSolve returns the inverse of a cacheMatrix object
# if called for the first time it calculates and stores the inverse
# if called after that it returns the previously calculated & stored inverse
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
m0 <- matrix(c(1, 4, 9, 16), 2,2)
m1 <- makeCacheMatrix(m0)
m1
m0
cacheSolve(m2)
cacheSolve(m0)
cacheSolve(m1)
solve(m1)
solve(m0)
cacheSolve(m0)
m1
cacheSolve(m1)
solve(m0)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s<-NULL
set<-function(y){
x<<-y
s<-NULL
}
get<-function(){
x
}
setInverse<-function(solve){
s<<-solve
}
getInverse<-function(){
s
}
list(set =set, get=get, setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s<-x$getInverse()
if(!is.null(s)){
message("Retreiving Cached Data")
return(s)
}
data<-x$get()
s<-solve(data,...)
x$setInverse(s)
return(s)
}
m0
solve(m0)
m1<-makeCacheMatrix(m0)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
m0 <- matrix(c(1, 2,3,4,5,6,7,8,9), 3,3)
m0
solve(m0)
solve(m0)
m0 <- matrix(c(1, 4, 9, 16), 2,2)
solve(m0)
m0 <- matrix(c(1, 2,3,4,5,6,7,8,9), 3,3)
solve(m0)
m0 <- matrix(c(1,4,2,5,7,8,9,5,4), 3,3)
m0
solve(m0)
m1<-makeCacheMatrix(m0)
cacheSolve(m1)
cacheSolve(m1)
get(m1)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
system.time()
return(i)
}
## makeCacheMatrix
## It defines the getter and the setter of a matrix (x) and its inverse (i)
makeCacheMatrix <- function(x = matrix()) {
i<-NULL
set<-function(y){
x<<-y
i<-NULL
}
get<-function(){
x
}
setInverse<-function(solve){
i<<-solve
}
getInverse<-function(){
i
}
list(set =set, get=get, setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<-x$getInverse()
if(!is.null(i)){
message("Retreiving Cached Data")
return(i)
}
data<-x$get()
s<-solve(data,...)
x$setInverse(i)
return(i)
s
## makeCacheMatrix
## It defines the getter and the setter of a matrix (x) and its inverse (i)
makeCacheMatrix <- function(x = matrix()) {
i<-NULL
set<-function(y){
x<<-y
i<-NULL
}
get<-function(){
x
}
setInverse<-function(solve){
i<<-solve
}
getInverse<-function(){
i
}
list(set =set, get=get, setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<-x$getInverse()
if(!is.null(i)){
message("Retreiving Cached Data")
return(i)
}
data<-x$get()
s<-solve(data,...)
x$setInverse(i)
return(i)
}
z
